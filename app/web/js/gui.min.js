var GUI = {
	lang: '',
	token: '',
	init: function () {
		$(document).on('click', 'a.gui-request, input.gui-request[type=button], button.gui-request', function () {
			if ($(this).hasClass('gui-fast-open')) {
				GUI.window.open({id: 'gui-loader', styles: {top: 'center'}, content: {title: 'Загрузка...'}})
			}
			$(this).siblings('div.gui-message').html('').addClass('gui-message-loading');
			GUI.request($(this))
		}).on('keyup change', 'input.gui-request[type=text]', function () {
			GUI.request($(this))
		});
		$(document).on('mousedown', 'div.gui-window', function () {
			GUI.window.activate($(this).attr('id'))
		});
		$(document).on('click', 'a.gui-window-min', function () {
			GUI.window.minimize($(this).closest('div.gui-window').attr('id'))
		});
		$(document).on('click', 'a.gui-window-max', function () {
			GUI.window.maximize($(this).closest('div.gui-window').attr('id'))
		});
		$(document).on('click', 'a.gui-window-close', function () {
			GUI.window.close($(this).closest('div.gui-window').attr('id'))
		});
		$(document).on('keyup', '.gui-form input', function (e) {
			e = e || event;
			if (e.keyCode == 13) {
				var submit_button = $(this).closest('.gui-form').find('.gui-form-submit');
				if (submit_button.length) {
					if ((typeof e.ctrlKey != 'undefined' && e.ctrlKey) || $(this).closest('.gui-form').hasClass('gui-form-autosubmit')) {
						submit_button.click()
					}
				}
			}
		});
		var lang = document.location.href.replace('http://' + document.domain + '/', '').split('/');
		if (lang[0] == 'ua') {
			this.lang = '/' + lang[0]
		}
		var t = $('meta[name=csrf-token]').attr('content');
		if (t.length) {
			this.token = t
		}
	}, request: function (obj) {
		var script = obj.attr('data-module');
		if (typeof script != 'string') {
			script = obj.attr('module')
		}
		if (typeof script != 'string' || !script.length) {
			return false
		}
		script = GUI.lang + '/' + script + '/request/';
		var data = obj.attr('data-data');
		if (typeof data != 'string') {
			data = obj.attr('data')
		}
		if (typeof data != 'string') {
			data = ''
		}
		var form = obj.attr('data-form');
		if (typeof form != 'string') {
			form = obj.attr('form')
		}
		data = GUI.form_util.serialize(form, data) + '&_csrf=' + this.token;
		var container = obj.attr('data-container');
		if (typeof container != 'string') {
			container = obj.attr('container')
		}
		if (container && container.length) {
			container = $(container)
		} else {
			if (form && form.length) {
				container = $(form)
			} else {
				container = false
			}
		}
		$.post(script, data, function (answer) {
			if (!answer || typeof answer != 'object') {
				return
			}
			GUI.form_util.mark_fields(container, false, false);
			GUI.form_util.message(container, false, false);
			for (var key in answer) {
				if (answer[key]) {
					switch (key) {
						case'message':
							if (typeof answer['message_type'] != 'string') {
								answer['message_type'] = ''
							}
							GUI.form_util.message(container, answer['message'], answer['message_type']);
							break;
						case'location':
							if (answer[key] == 'refresh' || answer[key] == 'reload') {
								document.location.reload()
							} else {
								document.location.href = answer[key]
							}
							return;
						case'window':
							GUI.window.open(answer[key]);
							break;
						case 'popup':
							$.magnificPopup.open({
								items:{
									src:answer.popup,
									type: 'inline',
									removalDelay: 300,
									midClick: true,
									mainClass: 'mfp-move-from-top order_popup'
								}
							});
							$('body').trigger('popup-loaded');
							break;
						case'error_field':
							GUI.form_util.mark_fields(container, answer['error_field'], 'error');
							break;
						case'success_field':
							if (typeof answer['error_field'] != 'undefined' && answer['error_field'].length) {
								GUI.form_util.mark_fields(container, answer['success_field'], 'success')
							}
							break;
						case'man':
							eval(answer[key]);
							break;
						default:
							break
					}
				}
			}
		}, 'json').fail(function () {
			GUI.form_util.message(container, false, false);
			GUI.form_util.message(container, 'Ошибка запроса', 'error')
		})
	}, form_util: {
		serialize: function (form, data) {
			var form_data = '';
			if (typeof form == 'string' && form.length) {
				if ($(form).is('form')) {
					form_data += $(form).serialize()
				} else {
					$(form).find('input, textarea, select').each(function () {
						if (($(this).attr('type') == 'checkbox' || $(this).attr('type') == 'radio') && !$(this).is(':checked')) {
							return
						}
						if (form_data.length > 0) {
							form_data += '&'
						}
						form_data += $(this).attr('name') + '=' + encodeURIComponent($(this).val())
					})
				}
			}
			if (typeof data == 'string' && data.length) {
				if (form_data.length > 0) {
					form_data = '&' + form_data
				}
				form_data = data + form_data
			}
			return form_data
		},
		mark_fields: function (form, fields, type) {
			if (typeof form == 'string' && form.length) {
				form = $(form)
			}
			if (typeof form == 'object' && form.length) {
				if (typeof type == 'undefined') {
					type = false
				}
				if (type == false) {
					form.find('input, select, textarea').removeClass('gui-input-error gui-input-success').closest('div.gui-field').removeClass('gui-field-error gui-field-success')
				} else {
					if (typeof fields == 'object' && fields.length && typeof type == 'string' && type.length > 0) {
						for (var name in fields) {
							name = fields[name];
							if (typeof name == 'string' && name.length > 0) {
								form.find('input[name="' + name + '"], select[name="' + name + '"], textarea[name="' + name + '"]').addClass('gui-input-' + type).closest('div.gui-field').addClass('gui-field-' + type)
							}
						}
						if (type == 'error' && form.hasClass('gui-scroll-to-error') && form.find('.gui-field-error').length) {
							if (form.hasClass('gui-form-relative')) {
								form.find('.gui-form-content').scrollTo(form.find('.gui-field-error').first(), 300)
							} else {
								form.closest('.gui-window-content').scrollTo(form.find('.gui-field-error').first(), 300)
							}
						}
					}
				}
			}
		},
		message: function (form, message, type) {
			if (typeof form == 'string' && form.length) {
				form = $(form)
			}
			if (typeof form == 'object' && form.length) {
				if (typeof message != 'string' || message.length == 0) {
					message = false
				}
				if (typeof type != 'string') {
					type = ''
				}
				if (message == false) {
					form.find('.gui-message').removeClass('gui-message-error gui-message-success gui-message-loading').hide()
				} else {
					if (type.length > 0) {
						type = 'gui-message-' + type
					}
					form.find('.gui-message').html(message).addClass(type).show()
				}
			}
		},
		autocomplete: {
			defaults: {
				'inputSelector': '.ac-input',
				'url': null,
				'post': null,
				'wait': 300,
				'minChars': 1,
				'containerClass': 'ac-container',
				'width': null,
				'left': null,
				'top': 19,
				'bottom': 19,
				'resultClass': 'ac-result',
				'resultLimit': 10,
				'resultFormat': function (row) {
					for (p in row)return row[p]
				},
				'onChange': function (data) {
				},
				'onSelect': function (data) {
				}
			}, init: function (custom_params) {
				var KEY = {
					UP: 38,
					RIGHT: 39,
					LEFT: 37,
					DOWN: 40,
					TAB: 9,
					ENTER: 13,
					ESC: 27,
					PAGEUP: 33,
					PAGEDOWN: 34,
					HOME: 36,
					END: 35
				};
				var settings = {};
				var acObj = this;
				var timeout;
				for (var p in GUI.form_util.autocomplete.defaults) {
					settings[p] = GUI.form_util.autocomplete.defaults[p]
				}
				if (typeof custom_params == 'object') {
					for (p in custom_params) {
						settings[p] = custom_params[p]
					}
				}
				$(settings.inputSelector).each(function () {
					var div = $('<div>').addClass(settings.resultClass).hide();
					if (settings.width == null || parseInt(settings.width) < 25) {
						div.width($(this).width())
					} else {
						div.width(parseInt(settings.width))
					}
					if (settings.left == null) {
						div.css({left: 0})
					} else {
						div.css({left: parseInt(settings.left)})
					}
					if ($(this).hasClass('ac-top')) {
						if (settings.bottom == null) {
							div.css({bottom: 0})
						} else {
							div.css({bottom: parseInt(settings.bottom)})
						}
					} else {
						if (settings.top == null) {
							div.css({top: 0})
						} else {
							div.css({top: parseInt(settings.top)})
						}
					}
					$(this).wrap($('<div/>').addClass(settings.containerClass)).before(div);
					$(this).on('keyup', {acObj: acObj, settings: settings}, function (e) {
						var el = $(this);
						var res = el.siblings('div.' + settings.resultClass);
						switch (e.keyCode) {
							case KEY.UP:
								if (res.html()) {
									if (res.css('display') == 'none') {
										res.show().find('li').removeClass('ac-over')
									}
									var cur = res.find('li.ac-over');
									if (cur.length) {
										cur = cur.prev()
									}
									if (!cur.length) {
										cur = res.find('li:last-child')
									}
									res.find('li').removeClass('ac-over');
									if (cur.length) {
										cur.addClass('ac-over')
									}
								}
								break;
							case KEY.DOWN:
								if (res.html()) {
									if (res.css('display') == 'none') {
										res.show().find('li').removeClass('ac-over')
									}
									var cur = res.find('li.ac-over');
									if (cur.length) {
										cur = cur.next()
									}
									if (!cur.length) {
										cur = res.find('li:first-child')
									}
									res.find('li').removeClass('ac-over');
									if (cur.length) {
										cur.addClass('ac-over')
									}
								}
								break;
							case KEY.ENTER:
								if (res.html() && res.css('display') != 'none') {
									var cur = res.find('li.ac-over');
									if (cur.length) {
										el.val(cur.metadata().name);
										res.html('').hide();
										settings.onChange($(this));
										settings.onSelect(cur.metadata())
									}
								}
								break;
							case KEY.ESC:
								res.hide();
								break;
							case KEY.LEFT:
							case KEY.RIGHT:
							case KEY.PAGEUP:
							case KEY.PAGEDOWN:
							case KEY.HOME:
							case KEY.END:
							case KEY.TAB:
								break;
							default:
								clearTimeout(timeout);
								timeout = setTimeout(function () {
									e.data.acObj.request(el, e.data.settings)
								}, e.data.settings.wait);
								settings.onChange($(this))
						}
					});
					$(this).on('blur', function () {
						var _inp = $(this);
						setTimeout(function () {
							_inp.siblings('div').hide()
						}, 300)
					})
				})
			}, request: function (el, params) {
				var res = el.siblings('div.' + params.resultClass);
				if (el.val().length < params.minChars) {
					res.html('').hide();
					return
				}
				var post = 'q=' + el.val();
				if (typeof params.post == 'string') {
					post += '&' + params.post
				}
				$.post(params.url, post, function (answer) {
					if (answer.length) {
						var list = $('<ul/>');
						for (var i = 0; i < answer.length; i++) {
							if (i > params.resultLimit) {
								break
							}
							var attr = '{';
							for (var a in answer[i]) {
								attr += a + ':"';
								if (typeof answer[i][a] == 'string') {
									attr += answer[i][a].replace(/"/g, '\\"')
								} else {
									attr += answer[i][a]
								}
								attr += '",'
							}
							attr += '}';
							list.append($('<li/>').html(params.resultFormat(answer[i])).addClass(attr))
						}
						res.html('').append(list).show();
						$(params.inputSelector).siblings('div').find('li').on('click', {settings: params}, function (e) {
							var el = $(this).parent('ul').parent('div').siblings(e.data.settings.inputSelector);
							var res = el.siblings('div.' + e.data.settings.resultClass);
							el.val($(this).metadata().name);
							res.html('').hide();
							e.data.settings.onChange(el);
							e.data.settings.onSelect($(this).metadata())
						});
						$(params.inputSelector).siblings('div').find('li').hover(function () {
							$(this).siblings('li').removeClass('ac-over');
							$(this).addClass('ac-over')
						}, function () {
							$(this).removeClass('ac-over')
						})
					} else {
						res.html('').hide()
					}
				}, 'json')
			}
		}
	}, window: {
		open: function (data, animate) {
			if (typeof data.id == 'undefined') {
				return false
			}
			GUI.window.close('gui-loader');
			if (!$('#' + data.id).length) {
				GUI.window.draw(data.id)
			}
			var w = $('#' + data.id);
			if (typeof data.options == 'object') {
				GUI.window.set_options(w, data.options)
			} else {
				data.options = {}
			}
			if (typeof data.styles == 'object') {
				if (typeof animate == 'undefined') {
					animate = false
				}
				if (typeof data.options.maxsize != 'undefined' && data.options.maxsize) {
					animate = false
				}
				GUI.window.set_styles(w, data.styles, animate)
			}
			if (typeof data.content == 'object') {
				GUI.window.set_content(w, data.content)
			}
			GUI.window.activate(data.id);
			return data.id
		}, close: function (id) {
			if (typeof id != 'string' || !id.length) {
				return
			}
			$('#' + id + '-container').remove();
			GUI.window.flat();
			var o = GUI.window.last();
			if (o) {
				GUI.window.activate(o)
			}
		}, draw: function (id) {
			if (typeof id != 'string' || !id.length) {
				return false
			}
			var html = '<div class="gui-window-container gui-window-overlay" id="' + id + '-container">';
			html += '<div class="gui-window" id="' + id + '">';
			html += '<div class="gui-window-head">';
			html += '<div class="gui-window-title"><span class="gui-window-icon"></span><span class="gui-window-name"></span></div>';
			html += '<div class="gui-window-controls"><a class="gui-window-close"></a></div>';
			html += '</div>';
			html += '<div class="gui-window-content"><div class="gui-window-loading"></div></div>';
			html += '<div class="gui-window-status"></div>';
			html += '</div>';
			html += '</div>';
			if ($('div.pb-page-box').length) {
				$('div.pb-page-box').append(html)
			} else {
				$('body').append(html)
			}
		}, set_options: function (w, options) {
			if (typeof w != 'object' || typeof options != 'object') {
				return false
			}
			if (typeof options.maxsize != 'undefined' && options.maxsize) {
				GUI.window.maximize(w.attr('id'), 'maximize')
			}
			if (typeof options.draggable != 'undefined' && options.draggable) {
				w.draggable({cancel: 'a', containment: 'parent', handle: 'div.gui-window-head'})
			}
			if (typeof options.overlay != 'undefined' && options.overlay == false) {
				w.parent('div.gui-window-container').removeClass('gui-window-overlay')
			}
			var controls = w.find('div.gui-window-controls');
			controls.find('*:not(.gui-window-close)').remove();
			if (typeof options.maximize != 'undefined' && options.maximize) {
				controls.prepend('<a class="gui-window-max"></a>')
			}
			if (typeof options.minimize != 'undefined' && options.minimize) {
				controls.prepend('<a class="gui-window-min"></a>')
			}
			if (typeof options.helper == 'object' && typeof options.helper.module == 'string' && options.helper.module.length) {
				var h = $('<a>', {'class': 'gui-window-help gui-request', 'module': options.helper.module});
				if (typeof options.helper.data == 'string') {
					h.attr('data', options.helper.data)
				}
				controls.prepend(h)
			}
		}, set_styles: function (w, styles, animate) {
			if (typeof w != 'object' || typeof styles != 'object') {
				return false
			}
			if (typeof w.attr('style') != 'undefined' || typeof w.attr('restore') != 'undefined') {
				return false
			}
			var params = ['left', 'top', 'width', 'height'];
			var css = {};
			for (i in params) {
				if (typeof styles[params[i]] != 'undefined') {
					css[params[i]] = styles[params[i]]
				} else {
					css[params[i]] = null
				}
			}
			var area = [parseInt(w.parent('div.gui-window-container').width() - 2), parseInt($(window).height() - 2)];
			if (parseInt(css.width) > area[0]) {
				css.width = area[0]
			}
			if (parseInt(css.width) > 0 && parseInt(css.width) < 200) {
				css.width = 200
			}
			if (parseInt(css.height) > area[1]) {
				css.height = area[1]
			}
			if (parseInt(css.height) > 0 && parseInt(css.height) < 100) {
				css.height = 100
			}
			if (css.left == 'center' || css.top == 'center') {
				w.css(css);
				if (css.left == 'center') {
					css.left = parseInt((area[0] - w.width()) / 2)
				}
				if (css.top == 'center') {
					css.top = parseInt((area[1] - w.height()) / 2)
				}
				w.removeAttr('style')
			}
			if (parseInt(css.left + css.width) > area[0]) {
				css.left = parseInt((area[0] - css.width))
			}
			if (parseInt(css.left) < 0) {
				css.left = 0
			}
			if (parseInt(css.top + css.height) > area[1]) {
				css.top = parseInt((area[1] - css.height))
			}
			if (parseInt(css.top) < 0) {
				css.top = 0
			}
			css.top += $(window).scrollTop();
			if (typeof animate != 'undefined' && animate == true) {
				w.removeAttr('style').animate(css, 100)
			} else {
				w.css(css)
			}
		}, set_content: function (w, data) {
			if (typeof w != 'object' || typeof data != 'object') {
				return false
			}
			if (typeof data.title == 'string' && data.title) {
				w.find('span.gui-window-name').html(data.title)
			}
			if (typeof data.body == 'string' && data.body) {
				w.find('div.gui-window-content').html(data.body)
			}
			if (typeof data.status == 'string' && data.status) {
				w.find('div.gui-window-status').html(data.status)
			}
		}, flat: function () {
			var all_z = [];
			var minimized_left = 0;
			$('div.gui-window-container:visible').each(function () {
				if ($(this).hasClass('gui-window-minimized')) {
					$(this).css({left: minimized_left});
					minimized_left += 264
				} else {
					all_z[parseInt($(this).css('z-index'))] = $(this).attr('id')
				}
			});
			var serial_z = 1;
			if (all_z.length) {
				for (var pos in all_z) {
					if (all_z[pos] && all_z[pos].length && $('#' + all_z[pos]).length) {
						$('#' + all_z[pos]).css({'z-index': serial_z});
						serial_z++
					}
				}
			}
			$('div.gui-window-top').removeClass('gui-window-top')
		}, activate: function (id) {
			if (typeof id == 'undefined' || !id.length) {
				return
			}
			GUI.window.flat();
			$('#' + id + '-container').show().css({'z-index': null}).addClass('gui-window-top')
		}, last: function () {
			var all_z = [];
			$('div.gui-window:visible').each(function () {
				var z = parseInt($(this).css('z-index'));
				if (z < 300) {
					all_z[z] = $(this).attr('id')
				}
			});
			return all_z.pop()
		}, minimize: function (id) {
			if (typeof id != 'string' || !id.length) {
				return
			}
			$('#' + id + '-container').toggleClass('gui-window-minimized');
			if ($('#' + id + '-container').hasClass('gui-window-minimized')) {
				if ($('#' + id).hasClass('ui-draggable')) {
					$('#' + id).draggable('disable').removeClass('ui-state-disabled')
				}
			} else {
				if ($('#' + id).hasClass('ui-draggable')) {
					$('#' + id).draggable('enable')
				}
				$('#' + id + '-container').removeAttr('style')
			}
			GUI.window.flat();
			var o = GUI.window.last();
			if (o) {
				GUI.window.activate(o)
			}
		}, maximize: function (id, mode) {
			if (typeof id != 'string' || !id.length) {
				return
			}
			if (typeof mode == 'undefined' || mode != 'maximize') {
				mode = 'toggle'
			}
			var w = $('#' + id);
			if (w.hasClass('gui-window-maximized')) {
				if (mode == 'toggle') {
					w.removeClass('gui-window-maximized').attr('style', w.attr('restore')).removeAttr('restore');
					if (w.hasClass('ui-draggable')) {
						w.draggable('enable')
					}
				}
			} else {
				w.attr('restore', w.attr('style')).addClass('gui-window-maximized').removeAttr('style').closest('.gui-window-container').removeClass('gui-window-minimized').removeAttr('style');
				if (w.hasClass('ui-draggable')) {
					w.draggable('disable').removeClass('ui-state-disabled')
				}
			}
			GUI.window.activate(id)
		}
	}, alert_util: {
		global: function (message, lifeTime) {
			if (typeof message.text == 'undefined' || message.text.length == 0) {
				return
			}
			if (typeof message.title == 'undefined') {
				message.title = 'Уведомление'
			}
			if (typeof message.type == 'undefined') {
				message.type = ''
			}
			var stackContainer, messageWrap, messageBox, messageBody, messageTextBox, closeButton;
			stackContainer = $('#notifier-box');
			if (!stackContainer.length) {
				stackContainer = $('<div>', {id: 'notifier-box'}).prependTo('#desktop');
				$('#notifier-box div.message-wrap').live('click', function () {
					$(this).fadeOut(300, function () {
						$(this).remove()
					})
				})
			}
			messageWrap = $('<div>', {'class': 'message-wrap ' + message.type, css: {display: 'none'}});
			messageBox = $('<div>', {'class': 'message-box'});
			messageHeader = $('<div>', {'class': 'message-header', text: message.title});
			messageBody = $('<div>', {'class': 'message-body'});
			messageTextBox = $('<span>', {text: message.text});
			closeButton = $('<a>', {'class': 'message-close', title: 'Закрыть уведомление'});
			messageWrap.appendTo(stackContainer).fadeIn();
			messageBox.appendTo(messageWrap);
			closeButton.appendTo(messageBox);
			messageHeader.appendTo(messageBox);
			messageBody.appendTo(messageBox);
			messageTextBox.appendTo(messageBody);
			if (lifeTime > 0) {
				setTimeout(function () {
					$(messageWrap).fadeOut(300, function () {
						$(this).remove()
					})
				}, lifeTime)
			}
			return this
		}
	}
};
function view(obj, get) {
	var res = '';
	for (p in obj) {
		if (typeof obj[p] == 'object')1; else res += p + ' = ' + obj[p] + "\n"
	}
	res = '<div style="padding-left:15px"><pre style="margin:0">' + res + '</pre></div>';
	if (typeof get != 'undefined' && get == 1)return res; else $('body').append('<div style="padding:15px 0">' + res + '</div>')
}